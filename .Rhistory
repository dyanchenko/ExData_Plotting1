help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
my_date<- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("1989 Май 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = h(now(), minutes = m(now()))
)
now()$h
now()%h
format(now(), "%h")
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
with_tz(arrive, "Hong Kong")
with_tz(arrive, "Asia/Hong Kong")
with_tz(arrive, "Asia/Hong_Kong")
with_tz(arrive, "Hong_Kong")
with_tz(arrive, tz = "Hong_Kong")
with_tz(arrive, tz = "Asia/Hong_Kong")
with_tz(arrive, tz = "Asia/Hong_Kong")
info()
with_tz(arrive, tz = "Asia/Hong_Kong")
with_tz(arrive, tz = "Asia/Hong_Kong")
with_tz(arrive, tz = "Asia/Hong_Kong")
arrive
with_tz(arrive, tz = "Asia/Hong_Kong")
skip()
with_tz(arrive, tz = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tz = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
last_time <- ymd("2008-06-17", tz = "Singapore")
?new_interval
last_time
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
pt(0.8, 15, lower.tail = FALSE)
alpha = 0.05
power.t.test(power = 0.9, delta = -0.01, sd = 0.04, type = "", alt = "one.sided")$n
power.t.test(power = 0.9, delta = -0.01, sd = 0.04, type = "one.sample", alt = "one.sided")$n
power.t.test(power = 0.9, delta = 0.01, sd = 0.04, type = "one.sample", alt = "one.sided")$n
power.t.test(power = 0.9, delta = 0, sd = 0.04, type = "one.sample", alt = "one.sided")$n
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
a <- c(140, 138, 150, 148, 135)
b <- c(132, 135, 151, 146, 130)
t.test(a, b, alternative= "two.sided", paired = TRUE, var.equal = FALSE)
pt(0.75, 3, lower.tail = FALSE)
c <- (0, 0, 0, 1)
c <- c(0, 0, 0, 1)
t.test(a, alternative= "one.sided", paired = FALSE, var.equal = FALSE)
t.test(a, alternative= "less", paired = FALSE, var.equal = FALSE)
c <- c(1, 1, 1, 2)
t.test(a, alternative= "less", paired = FALSE, var.equal = FALSE)
t.test(c, alternative= "less", paired = FALSE, var.equal = FALSE)
t.test(c, alternative= "bigger", paired = FALSE, var.equal = FALSE)
t.test(c, alternative= "greater", paired = FALSE, var.equal = FALSE)
c <- c(0, 0, 0, 1)
t.test(c, alternative= "greater", paired = FALSE, var.equal = FALSE)
pbinom(3, size = 4, prob = 0.5, lower.tail = FALSe)
pbinom(3, size = 4, prob = 0.5, lower.tail = FALSE)
pbinom(2, size = 4, prob = 0.5, lower.tail = FALSE)
r0 <- 10/100
r0
ppois(9, 5, lower.tail = FALSE)
r0 <- 1/100
ra <- 10/1787
ra
ra*100
ppois(0.56, 1, lower.tail = FALSE)
ppois(0.56, 1, lower.tail = TRUE)
a<- 10/100
b<- 10/1787
SE <- sqrt(a*(1-a)/1787)
SE
Z <- (b-a)/SE
Z
m1 = -3
sd1 = 1.5
m2 = 1
sd2 = 1.8
sp = sqrt((8 * 1.5^2 + 8 * 1.8^2) / (8 + 8 - 2))
m1 - m2 + c(-1, 1) * qt(.975, 18) * sp * (1 / 8 + 1 / 8)^.5
m2 - m1 + c(-1, 1) * qt(.975, 18) * sp * (1 / 8 + 1 / 8)^.5
sp = sqrt((8 * 1.5^2 + 8 * 1.8^2) / (9 + 9 - 2))
m2 - m1 + c(-1, 1) * qt(.975, 18) * sp * (1/9 + 1/9)^.5
pt(5.64,16, lower.tail = FALSE)
n = 100
mu0 = 0
mu = 0.1
sd = 0.04
mu = 0.01
t = (mu - mu0)/(sd /sqrt(n))
t
alpha = 0.5
t.half.alpha = qt(1-alpha/2, df = n-1)
c(-t.half.alpha,t.half.alpha)
pt(2.5, df = n - 1, lower.tail = FALSE)
pt(0.68, df = n - 1, lower.tail = FALSE)
z = qnorm(1-alpha)
alpha = 0.05
z = qnorm(1-alpha)
t.half.alpha = qt(1-alpha/2, df = n-1)
c(-t.half.alpha,t.half.alpha)
z = qnorm(1 - alpha)
pnorm(mu0 + z * sd/sqrt(n), mean = mu, sd = sd/sqrt(n), lower.tail = FALSE)
power.t.test(delta = 0.01, sd = 0.04, power = 0.9, alt = "one.sided")$n
power.t.test(delta = 0.01, sd = 0.04, power = 0.9, type = "greater", alt = "one.sided")$n
power.t.test(delta = 0.01, sd = 0.04, power = 0.9, type = "one.sample", alt = "one.sided")$n
power.t.test(delta = -0.01, sd = 0.04, power = 0.9, type = "one.sample", alt = "one.sided")$n
power.t.test(delta = 0.01, sd = 0.04, power = 0.9, type = "paired", alt = "one.sided")$n
power.t.test(delta = 0.01, sd = 0.04, power = 0.9, type = "two.sample", alt = "one.sided")$n
n = 9
mu = 1100
s = 30
alpha = 0.05
t = (mu)/(s /sqrt(n))
t
z = qnorm(1-alpha)
t.half.alpha = qt(1-alpha/2, df = n-1)
c(-t.half.alpha,t.half.alpha)
1100 + c(-1,1)*qt(0.975, 8) * 30 / sqrt(9)
swirl()
library(swirl)
swirl()
0
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
names(outcome)
library(dplyr)
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
states <- unique(d$State)
states
d<- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
head(d,3)
names(d) <- c("hospital","state","heart attack","heart failure","pheunomia")
head(d,3)
select(d, heart attack)
select(d, "heart attack")
names(d) <- c("hospital","state","heart_attack","heart_failure","pheunomia")
select(d, "heart attack")
select(d, heart_attack)
head(d,3)
gather(d, heart_attack, heart_failure, pheunomia, -hospital, - state)
library(dplyr)
gather(d, heart_attack, heart_failure, pheunomia, -hospital, - state)
gather(d, heart_attack, heart_failure, pheunomia, -hospital, -state)
group_by(d, hospital, state)
library(tidyr)
gather(d, heart_attack, heart_failure, pheunomia, -hospital, -state)
head(gather(d, heart_attack, heart_failure, pheunomia, -hospital, -state), 3)
a <- gather(d, heart_attack, heart_failure, pheunomia, -hospital, -state)
head(a)
a <- gather(d, outcome, value, -hospital, -state)
head(a)
unique(a$outcome)
head(a[!is.na(value)])
head(a[!is.na(a$value)])
head(a[!is.na(a$value),])
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not available")
states <- unique(d$State)
d<- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
names(d) <- c("hospital","state","heart_attack","heart_failure","pheunomia")
d <- gather(d, outcome, value, -hospital, -state)
head(d)
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
states <- unique(d$State)
d<- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
names(d) <- c("hospital","state","heart_attack","heart_failure","pheunomia")
head(d)
d <- gather(d, outcome, value, -hospital, -state)
head(d[!is.na(d$value),],3)
d <- d[!is.na(d$value),]
head(d)
rank <- filter(d, outcome = outcome)
rank <- filter(d, outcome == outcome)
rank
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
states <- unique(d$State)
d<- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
names(d) <- c("hospital","state","heart_attack","heart_failure","pheunomia")
d <- gather(d, out, value, -hospital, -state)
d <- d[!is.na(d$value),]
source('D:/DSToolbox/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
source('D:/DSToolbox/best.R')
best("TX", "heart attack")
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
states <- unique(d$State)
if(!(outcome %in% c("heart attack","heart failure","pneumonia")))
stop("invalid outcome")
if(!(state %in% states)) stop("invalid state")
d<- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
names(d) <- c("hospital","state","heart_attack","heart_failure","pheunomia")
d <- gather(d, out, value, -hospital, -state)
d <- d[!is.na(d$value),]
rank <- filter(d, state == "TX", out == "heart attack")
rank
d[state == "TX",]
d[d$state == "TX",]
swirl()
library(swirl)
swirl()
library(tidyr)
students
?gather
bye()
library(tidyr)
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
states <- unique(d$State)
if(!(outcome %in% c("heart attack","heart failure","pneumonia")))
stop("invalid outcome")
if(!(state %in% states)) stop("invalid state")
d<- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
names(d) <- c("hospital","state","heart attack","heart failure","pheunomia")
d <- gather(d, out, value, -hospital, -state, na.rm = TRUE)
head(d)
rank <- filter(d, state == "TX", out == "heart attack")
head(rank)
arrange(rank, desc(value), hospital)
source('D:/DSToolbox/best.R')
best("TX", "heart attack")
source('D:/DSToolbox/best.R')
best("TX", "heart attack")
source('D:/DSToolbox/best.R')
source('D:/DSToolbox/best.R')
best("TX", "heart attack")
source('D:/DSToolbox/best.R')
source('D:/DSToolbox/best.R')
source('D:/DSToolbox/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
states <- unique(d$State)
d<- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
names(d) <- c("Hospital","State","heart attack","heart failure","pheunomia")
d["State"=="MD",]
d[,"State"=="MD"]
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
states
d<- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
unique(d$States)
unique(d$State)
names(d) <- c("Hospital","State","heart attack","heart failure","pheunomia")
unique(d$State)
source('D:/DSToolbox/best.R')
d <- gather(d, out, value, -Hospital, -State)
d <- d[!is.na(d$value),]
unique(d$State)
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
head(d)
rank <- filter(d, State == "TX", out == "heart failure")
rank
arrange(filter(d, State == "TX", out == "heart failure"), Hospital)
top(arrange(filter(d, State == "TX", out == "heart failure"), Hospital),10)
head(arrange(filter(d, State == "TX", out == "heart failure"), Hospital),10)
head(arrange(filter(d, State == "TX", out == "heart failure"), value),3)
head(arrange(filter(d, State == "TX", out == "heart failure"), value))
head(arrange(filter(d, State == "TX", out == "heart failure"), value, Hospital))
head(arrange(filter(d, State == "TX", out == "heart failure"), value, Hospital),20)
best("TX", "heart failure")
best("MD", "pneumonia")
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
states <- unique(d$State)
d<- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
names(d) <- c("Hospital","State","heart attack","heart failure","pheunomia")
d <- gather(d, out, value, -Hospital, -State)
d <- d[!is.na(d$value),]
head(arrange(filter(d, State == "MD", out == "pneumonia"), value, Hospital),20)
head(filter(d, State == "MD", out == "pneumonia"),20)
head(filter(d, State == "MD"),20)
head(filter(d, out == "pneumonia"),20)
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
states <- unique(d$State)
d <- read.csv("outcome-of-care-measures.csv",
states <- unique(d$State)
d <- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
names(d)
states <- unique(d$State)
d <- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
names(d)
source('D:/DSToolbox/best.R')
best("MD", "pneumonia")
source('D:/DSToolbox/best.R')
best("MD", "pneumonia")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
d <- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
d[State == "MD"]
d["State" == "MD"]
d[,"State" == "MD"]
names(d) <- c("Hospital","State","heart attack","heart failure","pneumonia")
d[("State" == "MD"),]
d[,("State" == "MD")]
d[,"State" == "MD"]
d[, d$State == "MD"]
class(d$State)
d <- gather(d, out, value, -Hospital, -State)
head(d)
d[,d$State == "MD"]
d[, State == "MD"]
d[State == "MD", ]
d["State" == "MD", ]
d[d$State == "MD", ]
d[!is.numeric(d$value),]
d[is.numeric(d$value),]
class(d$value)
t <- d
t$value <- as.numeric(t$value)
t <- t[!is.na(t$value),]
t[t$State == "MD", ]
source('D:/DSToolbox/best.R')
best("MD", "pneumonia")
submit()
submit()
source('D:/DSToolbox/rankhospital.R')
source('D:/DSToolbox/rankhospital.R')
source('D:/DSToolbox/rankhospital.R')
source('D:/DSToolbox/rankhospital.R')
source('D:/DSToolbox/rankhospital.R')
source('D:/DSToolbox/rankhospital.R')
nrow(d)
source('D:/DSToolbox/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
source('D:/DSToolbox/rankall.R')
source('D:/DSToolbox/rankall.R')
source('D:/DSToolbox/rankall.R')
source('D:/DSToolbox/rankall.R')
source('D:/DSToolbox/rankall.R')
source('D:/DSToolbox/rankall.R')
top_hospital <- c()
top_hospital
source('D:/DSToolbox/rankall.R')
head(rankall("heart attack", 20), 10)
source('D:/DSToolbox/rankall.R')
head(rankall("heart attack", 20), 10)
source('D:/DSToolbox/rankall.R')
source('D:/DSToolbox/rankall.R')
head(rankall("heart attack", 20), 10)
library(dplyr)
library(tidyr)
d <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
#na.strings = "Not Available")
states <- unique(d$State)
if(!(outcome %in% c("heart attack","heart failure","pneumonia")))
stop("invalid outcome")
d <- d[,c("Hospital.Name","State",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
names(d) <- c("Hospital","State","heart attack","heart failure","pneumonia")
d <- gather(d, out, value, -Hospital, -State)
d$value <- as.numeric(d$value)
d <- d[!is.na(d$value),]
nrow(d)
r1 <- filter(d, out == "heart attack")
head(r1)
states
list <- c()
t <- filter(r1, State == "AK")
r2 <- arrange(t, value, Hospital)
head(r2)
nrow(r2)
r2
num = 20
num > nrow(r2)
list <- rbind(list, c(NA, "AK"))
list
source('D:/DSToolbox/rankall.R')
head(rankall("heart attack", 20), 10)
source('D:/DSToolbox/rankall.R')
head(rankall("heart attack", 20), 10)
source('D:/DSToolbox/rankall.R')
source('D:/DSToolbox/rankall.R')
head(rankall("heart attack", 20), 10)
source('D:/DSToolbox/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
source('D:/DSToolbox/rankall.R')
source('D:/DSToolbox/rankall.R')
source('D:/DSToolbox/rankall.R')
source('D:/DSToolbox/rankall.R')
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
Sys.setenv(LANGUAGE="en")
source('D:/DSToolbox/ExData_Plotting1/Plot2.R')
source('D:/DSToolbox/ExData_Plotting1/Plot4.R')
getwd()
setwd("D:/DSToolbox/ExData_Plotting1")
source('D:/DSToolbox/ExData_Plotting1/Plot2.R')
with(work_data, plot(work_data$Date,work_data$Global_active_power, ylab = "Global Active Power (kilowatts)", xlab="", type="l"))
dev.copy(png, file = "./Plot2.png") #copying the histogram from screen device to PNG
with(work_data, plot(work_data$Date,work_data$Global_active_power, ylab = "Global Active Power (kilowatts)", xlab="", type="l"))
Sys.setlocale("LC_TIME", "English")
with(work_data, plot(work_data$Date,work_data$Global_active_power, ylab = "Global Active Power (kilowatts)", xlab="", type="l"))
source('D:/DSToolbox/ExData_Plotting1/Plot2.R')
source('D:/DSToolbox/ExData_Plotting1/Plot3.R')
source('D:/DSToolbox/ExData_Plotting1/Plot4.R')
source('D:/DSToolbox/ExData_Plotting1/Plot4.R')
source('D:/DSToolbox/ExData_Plotting1/Plot3.R')
source('D:/DSToolbox/ExData_Plotting1/Plot2.R')
source('D:/DSToolbox/ExData_Plotting1/Plot1.R')
